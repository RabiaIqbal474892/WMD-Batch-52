"use strict";
/*
This guess the number game is a short TypeScript/Node.js project that allows the user to guess the number generated by the computer. There are also several ways to alter the game, like adding more rounds or displaying the score. Itâ€™s quite simple and uses the random function to generate a number.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = require("inquirer");
var chalk_1 = require("chalk");
// Step 1: Generate a random number
var randomNumber = Math.floor(Math.random() * 100) + 1;
var remainingChances = 6;
// Step 2
function validateNumber(input) {
    var number = parseFloat(input);
    if (isNaN(number)) {
        return "Please enter a valid number.";
    }
    if (number < 0 || number > 100) {
        return "Please guess a number between 1 to hundred.";
    }
    return true;
}
function askForGuess() {
    return __awaiter(this, void 0, void 0, function () {
        var answers, guessedNumber;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, inquirer_1.default.prompt([
                        {
                            type: "input",
                            name: "guess",
                            message: "Please guess a number between 1 and 100:",
                            validate: validateNumber,
                        },
                    ])];
                case 1:
                    answers = _a.sent();
                    guessedNumber = parseInt(answers.guess);
                    if (!(guessedNumber === randomNumber)) return [3 /*break*/, 2];
                    console.log(chalk_1.default.bgBlue.yellow("Congratulations! You guessed the number ".concat(randomNumber, " correctly")));
                    process.exit(0);
                    return [3 /*break*/, 5];
                case 2:
                    if (!(guessedNumber < randomNumber)) return [3 /*break*/, 5];
                    remainingChances--;
                    console.log(chalk_1.default.bgRed.white("Too Low, kindly guess again. Your remaining chances are ".concat(remainingChances, ".")));
                    if (!(remainingChances === 0)) return [3 /*break*/, 3];
                    console.log(chalk_1.default.green.bgRed("We are really sorry you had missed all your chances. Correct number is ".concat(randomNumber)));
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, askForGuess()];
                case 4:
                    _a.sent(); // Call askForGuess again if there are remaining chances
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
}
askForGuess();
